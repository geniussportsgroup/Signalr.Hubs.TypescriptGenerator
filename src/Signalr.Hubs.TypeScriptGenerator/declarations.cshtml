@using System
@using System.Linq
@using GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models
@model GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models.TypesModel

@helper WriteDeprecatedComment(MemberInfo memberInfo, int indent)
{
	if (memberInfo.IsDeprecated)
	{
		var tabs = new string('\t', indent);
		var deprecatedLine = tabs + " * @deprecated";
		if (!string.IsNullOrEmpty(memberInfo.ReasonDeprecated))
		{
			deprecatedLine += " " + memberInfo.ReasonDeprecated;
		}
<text>@Raw(tabs)/*
@deprecatedLine
@Raw(tabs) */</text>
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//
// @DateTime.UtcNow.ToString("u")
// https://github.com/geniussportsgroup/Signalr.Hubs.TypeScriptGenerator
//
// </auto-generated>
//------------------------------------------------------------------------------

@foreach (var referencePath in Model.ReferencePaths) {
<text>/// <reference path="@referencePath" /></text>
}

// Hubs

interface SignalR {
@foreach (MemberTypeInfo type in Model.Hubs) {
	@WriteDeprecatedComment(type, 1)
	<text>@(type.Name): @(type.TypeScriptType);</text>
}
}

// Service contracts
@foreach (var grouping in Model.ServiceContracts.GroupBy(x => x.ModuleName)) {
<text>
declare namespace @grouping.Key {
@foreach (var serviceInfo in grouping) {
	@WriteDeprecatedComment(serviceInfo, 1)
	<text>interface @serviceInfo.Name {
		server: @(serviceInfo.ServerFullType);
		@if (serviceInfo.ClientType == "any")
		{
		<text> // TODO: Hub does not have a Client Interface as a generic argument - it is recommended to add one.</text>
		}
		client: @Raw(serviceInfo.ClientType);
	}
</text>
	@WriteDeprecatedComment(serviceInfo, 1)
	<text>interface @serviceInfo.ServerType {
	@foreach (var functionDetails in serviceInfo.Methods) {
		@WriteDeprecatedComment(functionDetails, 2)
		<text>@Raw(functionDetails.Name + functionDetails.Arguments): @Raw(functionDetails.ReturnType);</text>
	}
	}
</text>
}
}</text>
}

// Clients
@foreach (var grouping in Model.Clients.GroupBy(x => x.ModuleName)) {
<text>
declare namespace @grouping.Key {
@foreach (var clientInfo in grouping) {
	@WriteDeprecatedComment(clientInfo, 1)
	<text>interface @clientInfo.Name {
	@foreach (var functionDetails in clientInfo.Methods) {
		@WriteDeprecatedComment(functionDetails, 2)
		<text>@Raw(functionDetails.Name): @Raw(functionDetails.Arguments) => void;</text>
	}
	}
</text>
}
}</text>
}

// Data contracts
@foreach (var grouping in Model.DataContracts.GroupBy(x => x.ModuleName)) {
<text>declare namespace @grouping.Key {
@foreach (var dataContractInfo in grouping) {
	var openBrace = string.IsNullOrEmpty(dataContractInfo.ExtendsDeclaration) ? "{": " {";
	@WriteDeprecatedComment(dataContractInfo, 1)
	<text>interface @dataContractInfo.Name @dataContractInfo.ExtendsDeclaration@(openBrace)
	@foreach (MemberTypeInfo property in dataContractInfo.Properties)
	{
		@WriteDeprecatedComment(property, 2)
		<text>@Raw(property.DeclaredName): @Raw(property.TypeScriptType);</text>
	}
	}
</text>
}
}</text>
}

// Enums
@foreach (var grouping in Model.Enums.GroupBy(x => x.ModuleName))
{
<text>
declare namespace @grouping.Key {
@foreach (EnumInfo enumInfo in grouping) {
	@WriteDeprecatedComment(enumInfo, 1)
	<text>enum @enumInfo.Name {
	@foreach (var enumMember in enumInfo.Members) {
		@WriteDeprecatedComment(enumMember, 2)
		<text>@Raw(enumMember.Name) = @Raw(enumMember.Value.ToString()),</text>
	}
	}
</text>
}
}</text>
}
